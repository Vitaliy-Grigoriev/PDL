import frame

protocol Ethernet
{
    defines
    {
        header EthernetHeader
        {
            mac dst              ->   volatile   required   def(Destination MAC Address)
            mac src = default    ->   volatile   required   def(Source MAC Address)
            u16 type = default   ->   const   def(Lower Protocol Type)
        }
        global using Eth = EthernetHeader
        global using EthType = Eth.type

        mapping EthType   ->   final   id(auto).prefix(TYPE_)  default(_1)   big_endian
        {
            0x0800   ->   default   def(Internet Protocol version 4)
            0x0806   ->   def(Address Resolution Protocol)
            0x86DD   ->   def(Internet Protocol version 6)
        }

        mapping EthernetHeader.dst   ->   default(0)   def(Ethernet Addresses)
        {
            FF:FF:FF:FF:FF:FF   ->   id(0)   def(Broadcast MAC Address)
            F1:80:C2:00:00:08   ->   id(1)   def(STP Multicast Address)
            01:00:5E:00:00:00   ->   id(2)   def(IPv4 Multicast Address)
        }
    }

    declaration
    {
        request
        {
            round asd
            {
                string send_string = "123" -> const
                local EthernetHeader qwe_header0
                local EthernetHeader qwe_header1 = default
                local EthernetHeader qwe_header2 = { .dst = { .dst = "123",
                                                              .src = "123" },
                                                     .src = "123",
                                                     .type = "123" }
                global EthernetHeader qwe_header3 = { "123", "123", "123" }
                local string send_string = "123" -> const
            }
        }

        response
        {
            round asc
            {
                local string send_string = "123"
            }
        }
    }
}
