os: linux
dist: bionic
language: cpp

branches:
  only:
    - master
    - develop

addon_shortcuts:
  clang-9: &clang-9
    apt:
      sources:
        - ubuntu-toolchain-r-test
        - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main'
          key_url: https://apt.llvm.org/llvm-snapshot.gpg.key
      packages:
        - clang-9
        - libstdc++-9-dev

  clang-10: &clang-10
    apt:
      sources:
        - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main'
          key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
      packages:
        - clang-10
        - libstdc++-10-dev

  clang-11: &clang-11
    apt:
      sources:
        - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-11 main'
          key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
      packages:
        - clang-11
        - libstdc++-10-dev

  clang-12: &clang-12
    apt:
      sources:
        - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-12 main'
          key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
      packages:
        - clang-12
        - libstdc++-10-dev

  gcc-10: &gcc-10
    apt:
      sources:
        - sourceline: 'ppa:ubuntu-toolchain-r/test'
      packages:
        - g++-10

  gcc-11: &gcc-11
    apt:
      sources:
        - sourceline: 'ppa:ubuntu-toolchain-r/test'
      packages:
        - g++-11

jobs:
  include:
    ## Clang Release
    - { env: 'CXX=clang++-9 BUILD_TYPE=Release SANITIZER=false',    compiler: clang-9,    addons: *clang-9 }
    - { env: 'CXX=clang++-10 BUILD_TYPE=Release SANITIZER=false',   compiler: clang-10,   addons: *clang-10 }
    - { env: 'CXX=clang++-11 BUILD_TYPE=Release SANITIZER=false',   compiler: clang-11,   addons: *clang-11 }
    - { env: 'CXX=clang++-12 BUILD_TYPE=Release SANITIZER=true',    compiler: clang-12,   addons: *clang-12 }

    ## Clang Debug
    - { env: 'CXX=clang++-9 BUILD_TYPE=Debug SANITIZER=false',    compiler: clang-9,    addons: *clang-9 }
    - { env: 'CXX=clang++-10 BUILD_TYPE=Debug SANITIZER=false',   compiler: clang-10,   addons: *clang-10 }
    - { env: 'CXX=clang++-11 BUILD_TYPE=Debug SANITIZER=false',   compiler: clang-11,   addons: *clang-11 }
    - { env: 'CXX=clang++-12 BUILD_TYPE=Debug SANITIZER=true',    compiler: clang-12,   addons: *clang-12 }

    ## GCC Release
    - { env: 'CXX=g++-10 BUILD_TYPE=Release SANITIZER=false',   compiler: gcc-10,   addons: *gcc-10 }
    - { env: 'CXX=g++-11 BUILD_TYPE=Release SANITIZER=false',   compiler: gcc-11,   addons: *gcc-11 }

    ## GCC Debug
    - { env: 'CXX=g++-10 BUILD_TYPE=Debug SANITIZER=false',   compiler: gcc-10,   addons: *gcc-10 }
    - { env: 'CXX=g++-11 BUILD_TYPE=Debug SANITIZER=false',   compiler: gcc-11,   addons: *gcc-11 }

before_install:
  - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
  - sudo apt-get -qq update
  - sudo apt install libicu-dev libicu60 libxml2-dev zlib1g-dev
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/DEPS"
  - mkdir -p ${DEPS_DIR}
  - cd ${DEPS_DIR}


install:
  - |
    CMAKE_URL="https://cmake.org/files/v3.20/cmake-3.20.2-linux-x86_64.tar.gz"
    mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
  - |
    ../install_boost.sh ${DEPS_DIR}
  - |
    ../install_llvm.sh ${DEPS_DIR}
  - |
    GOOGLETEST_URL="https://github.com/google/googletest/archive/release-1.10.0.tar.gz"
    mkdir googletest && travis_retry wget --no-check-certificate --quiet -O - ${GOOGLETEST_URL} | tar --strip-components=1 -xz -C googletest
  - cd googletest
  - cmake -DBUILD_SHARED_LIBS=ON .
  - cmake --build . -j "$(nproc)"
  - sudo cp -a googletest/include/gtest /usr/include
  - sudo cp -a lib/libgtest_main.so lib/libgtest.so /usr/lib/
  - cmake --install .


before_script:
  - export PATH=${DEPS_DIR}/boost:${PATH}
  - export PATH=${DEPS_DIR}/llvm:${PATH}
  - export PATH=${DEPS_DIR}/cmake/bin:${PATH}
  - cd ${TRAVIS_BUILD_DIR}


script:
  - pwd
  - uname -a
  - cmake --version
  - ${CXX} --version
  - cmake -DPDL_WITH_TESTS=1 -DPDL_WITH_SANITIZER=${SANITIZER} -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_CXX_COMPILER=${CXX} .
  - cmake --build . -j "$(nproc)"
  - ctest --verbose


notifications:
  email:
    on_failure: always
    on_success: never
