FUNCTION ::name:: -> ::function_type:: owner(::protocol::) global
{
    // Function body.
    return ::value::
}


PROTOCOL ::NAME:: definition(::string::) version(::string::) next_protocol(::NAME::)
{
    // bit
    // byte
    // u8,u16,u32,u64
    // i8,i16,i32,i64
    // data(utf-8/binary/ascii, ::length::)
    // data(utf-8/binary/ascii, ::symbol::)
    // data(utf-8/binary/ascii, ::regex::)
    // array - ::type::[::number::]
    // list - { ::type:: ::name:: : value(), ::type:: ::name:: : value(), ... }

    USING ::name:: as ::type::
    ALIAS def as definition


    GLOBAL
    {
        endian: direct/little/big/middle
    }

    VARS
    {
        // Global variable.
        ::type:: ::NAME:: : const/volatile value(...) visibility(REQUEST/RESPONSE/ALL) definition(::string::)
        // u32 global_var_example: value(0xFFFFFFFF) const visibility() definition(Global Variable)

        PACKET ::name:: definition(::string::)
        {
            ::type:: ::name:: : value(...) const/volatile definition(::string::) required/optional/conditional(exist(::field::))
            // u32 example0: value(50) const required definition(Identifier)
            // u16 example1: value(25) const optional definition(Additional identifier)
            // bit[3] example2: value(011/3/) const required conditional(exist(example1) and more(5))
            // u16 example3: value() optional definition(Additional identifier)
        }
    }

    DECLARATION
    {
        REQUEST
        {
            ROUND ::ID:: name(::name::) definition(::string::)
            {
                send ::packet_name:: : ::packet_field:: = ::value::
            }
        }

        RESPONSE
        {

        }
    }

    POLICY
    {

    }
}


PACKET name
{
    version: bit[4] const(4);
    ihl: bit[4] min(5) value(offset(options) / 4);
    tos_precedence: bit[3] variant {
        |0 => Routine |1 -> Priority
        |2 -> Immediate |3 -> Flash
        |4 -> Flash_override |5 -> ECP
        |6 -> Internetwork_control |7 -> Network_control
    };
    tos_delay: bit[1] variant {|0 => Normal |1 -> Low};
    tos_throughput: bit[1] variant {|0 => Normal |1 -> Low};
    tos_reliability: bit[1] variant {|0 => Normal |1 -> Low};
    tos_reserved: bit[2] const(0);
    length: uint16 value(offset(data));
    id: uint16;
    reserved: bit[1] const(0);
    dont_fragment: bit[1] default(0);
    can_fragment: bit[1] default(0);
    frag_offset: bit[13] default(0);
    ttl: byte;
    protocol: byte variant {|1->ICMP |2->IGMP |6->TCP |17->UDP};
    checksum: uint16 default(0);
    src: uint32;
    dest: uint32;
    options: byte[(ihl * 4) - offset(dest)] align(32);
    header_end: label;
    data: byte[length-(ihl*4)];
}